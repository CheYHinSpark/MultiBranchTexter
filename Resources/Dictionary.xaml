<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:MultiBranchTexter"
                    xmlns:c="clr-namespace:MultiBranchTexter.Controls"
                    xmlns:cvt="clr-namespace:MultiBranchTexter.Converters"
                    >

    <!--颜色部分-->
    <!--主题色-->
    <Color x:Key="Theme">#EEAA16</Color>
    
    <!--不变颜色刷-->
    <SolidColorBrush x:Key="MiddleBrush" Color="#80808080"/><!--中间灰色-->
    <SolidColorBrush x:Key="ThemeBrush" Color="#FFEEAA16"/>
    <SolidColorBrush x:Key="Highlight.ThemeBrush" Color="#80FFFFFF"/>
    <SolidColorBrush x:Key="RedBrush" Color="#FFD44C45"/>
    <SolidColorBrush x:Key="Fragment.BorderBrush" Color="#9064FFBE"/>
    <SolidColorBrush x:Key="Fragment.Background" Color="#3264FFBE"/>


    <!--转换器-->
    <cvt:NumberToPercentStrConverter x:Key="numToPerCvt" />
    <cvt:ListToBoolConverter x:Key="listToBoolCvt"/>

    <!--右键菜单style-->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                            Background="{DynamicResource NodeBgBrush}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource ThemeBrush}">
                        <StackPanel IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
                     TargetType="{x:Type MenuItem}">
        <Grid Width="{Binding Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Menu}}}"
              Height="{Binding Height, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Menu}}}">
            <Border x:Name="BD" CornerRadius="4" Margin="2" BorderThickness="1" 
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    Background="Transparent" BorderBrush="Transparent">
                <Path x:Name="CP" Stroke="{DynamicResource Foreground.BaseBrush}"
                      HorizontalAlignment="Center" StrokeThickness="1"
                      VerticalAlignment="Center"
                      Data="{Binding Header, 
                    RelativeSource={RelativeSource TemplatedParent}}" >
                </Path>
            </Border>
            <Popup x:Name="Popup" Placement="Bottom"
                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Fade">
                <Border x:Name="SubmenuBorder"
                        SnapsToDevicePixels="True"
                        BorderThickness="1"
                        Background="{DynamicResource NodeBgBrush}"
                        BorderBrush="{DynamicResource ThemeBrush}">
                    <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto">
                        <StackPanel IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </ScrollViewer>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="Background" Value="{DynamicResource Highlight.BaseBrush}" TargetName="BD"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Stroke" Value="{DynamicResource MiddleBrush}" TargetName="CP"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="Background" TargetName="BD">
                    <Setter.Value>
                        <RadialGradientBrush>
                            <GradientStop Color="{DynamicResource Base}" Offset="0.4"/>
                            <GradientStop Color="{DynamicResource Theme}" Offset="1"/>
                        </RadialGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Tag" Value="f">
                <Setter Property="Fill" TargetName="CP" Value="{DynamicResource Foreground.BaseBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}"
                 TargetType="{x:Type MenuItem}">
        <Border x:Name="BD" CornerRadius="4" Margin="2" BorderThickness="1" 
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    Background="Transparent" BorderBrush="Transparent">
            <Path x:Name="CP" Stroke="{DynamicResource Foreground.BaseBrush}"
                      HorizontalAlignment="Center" StrokeThickness="1"
                      VerticalAlignment="Center"
                      Data="{Binding Header, 
                    RelativeSource={RelativeSource TemplatedParent}}" >
            </Path>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="Background" Value="{DynamicResource Highlight.BaseBrush}" TargetName="BD"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Stroke" Value="{DynamicResource MiddleBrush}" TargetName="CP"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="Background" TargetName="BD">
                    <Setter.Value>
                        <RadialGradientBrush>
                            <GradientStop Color="{DynamicResource Base}" Offset="0.4"/>
                            <GradientStop Color="{DynamicResource Theme}" Offset="1"/>
                        </RadialGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Tag" Value="f">
                <Setter Property="Fill" TargetName="CP" Value="{DynamicResource Foreground.BaseBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
                 TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1" Background="Transparent">
            <Grid>
                <ContentPresenter x:Name="HeaderHost"
                                 Margin="10,2,10,2"
                                 ContentSource="Header"
                                 HorizontalAlignment="Center"
                                 RecognizesAccessKey="True" />
                <Path HorizontalAlignment="Right" Margin="2"
                      VerticalAlignment="Center"
                      Data="M 0 0 L 0 10 L 5 5 Z" Fill="{DynamicResource MiddleBrush}"/>
                <Popup x:Name="Popup"
                       Placement="Right"
                       HorizontalOffset="0"
                       IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True"
                       Focusable="False"
                       PopupAnimation="Fade">
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            Background="{DynamicResource NodeBgBrush}"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource ThemeBrush}">
                        <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Hidden">
                            <StackPanel IsItemsHost="True"
                                        KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="Border"/>
                <Setter Property="Background" Value="{DynamicResource NodeBgHBrush}" TargetName="Border"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MiddleBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
                 TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1" Background="Transparent">
            <ContentPresenter x:Name="HeaderHost"
                              Margin="10,2,10,2"
                              ContentSource="Header"
                              HorizontalAlignment="Center"
                              RecognizesAccessKey="True" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="Border"/>
                <Setter Property="Background" Value="{DynamicResource NodeBgHBrush}" TargetName="Border"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MiddleBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!-- MenuItem Style -->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{DynamicResource Foreground.BaseBrush}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
                        Value="{DynamicResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope"
                        Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
                        Value="{DynamicResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="MinWidth" Value="100"/>
                <Setter Property="Template"
                        Value="{DynamicResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="MinWidth" Value="100"/>
                <Setter Property="Template"
                        Value="{DynamicResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <!--ScrollBar-->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{DynamicResource ThemeBrush}">
                        <Border x:Name="Border" Margin="1" Background="Transparent">
                            <Path Fill="{DynamicResource Foreground.ThemeBrush}"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="{Binding Content, 
                                RelativeSource={RelativeSource TemplatedParent}}" >
                            </Path>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Highlight.ThemeBrush}" TargetName="Border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{DynamicResource ThemeBrush}">
                        <Rectangle x:Name="thumbBd" Margin="1" Fill="Transparent" Opacity="0.6"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="{DynamicResource Highlight.ThemeBrush}" TargetName="thumbBd"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter Property="Opacity" Value="1" TargetName="thumbBd"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid Background="{StaticResource MiddleBrush}">
            <Grid.RowDefinitions>
                <RowDefinition Height="12" />
                <RowDefinition Height="*" />
                <RowDefinition Height="12" />
            </Grid.RowDefinitions>
            <RepeatButton Grid.Row="0"
                          Style="{DynamicResource ScrollBarLineButton}"
                          Command="ScrollBar.LineUpCommand"
                          Content="M 0 4 L 8 4 L 4 0 Z" />
            <Track x:Name="PART_Track"
                   Grid.Row="1"
                   IsDirectionReversed="True">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{DynamicResource ScrollBarThumb}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Row="2"
                          Style="{DynamicResource ScrollBarLineButton}"
                          Command="ScrollBar.LineDownCommand"
                          Content="M 0 0 L 4 4 L 8 0 Z" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid Background="{StaticResource MiddleBrush}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="12" />
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="12" />
            </Grid.ColumnDefinitions>
            <RepeatButton Grid.Column="0"
                          Style="{DynamicResource ScrollBarLineButton}"
                          Command="ScrollBar.LineLeftCommand"
                          Content="M 4 0 L 4 8 L 0 4 Z" />
            <Track x:Name="PART_Track"
                   Grid.Column="1"
                   IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{DynamicResource ScrollBarThumb}"/>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{DynamicResource ScrollBarPageButton}"
                                  Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
            <RepeatButton Grid.Column="2"
                          Style="{DynamicResource ScrollBarLineButton}"
                          Command="ScrollBar.LineRightCommand"
                          Content="M 0 0 L 4 4 L 0 8 Z" />
        </Grid>
    </ControlTemplate>

    <Style x:Key="{x:Type ScrollBar}" TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="12" />
                <Setter Property="Template" Value="{DynamicResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="12" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{DynamicResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter/>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Value="{TemplateBinding VerticalOffset}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Value="{TemplateBinding HorizontalOffset}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                        <Rectangle Grid.Column="1" Grid.Row="1" Fill="{DynamicResource ThemeBrush}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--通用按钮样式-->
    <ControlTemplate x:Key="generalButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="BD" CornerRadius="4" Margin="2" BorderThickness="1" 
                Background="Transparent" BorderBrush="Transparent">
            <Path x:Name="CP" Stroke="{DynamicResource Foreground.BaseBrush}"
                  HorizontalAlignment="Center" StrokeThickness="1"
                  VerticalAlignment="Center"
                  Data="{Binding Content, 
                RelativeSource={RelativeSource TemplatedParent}}" >
            </Path>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="Background" Value="{DynamicResource Highlight.BaseBrush}" TargetName="BD"/>
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="Background" TargetName="BD">
                    <Setter.Value>
                        <RadialGradientBrush>
                            <GradientStop Color="{DynamicResource Base}" Offset="0.4"/>
                            <GradientStop Color="{DynamicResource Theme}" Offset="1"/>
                        </RadialGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="Tag" Value="l">
                <Setter Property="CornerRadius" TargetName="BD" Value="0,4,4,0"/>
                <Setter Property="Margin" TargetName="BD" Value="0,2,2,2"/>
            </Trigger>
            <Trigger Property="Tag" Value="t">
                <Setter Property="CornerRadius" TargetName="BD" Value="0,0,4,4"/>
                <Setter Property="Margin" TargetName="BD" Value="2,0,2,2"/>
            </Trigger>
            <Trigger Property="Tag" Value="r">
                <Setter Property="CornerRadius" TargetName="BD" Value="4,0,0,4"/>
                <Setter Property="Margin" TargetName="BD" Value="2,2,0,2"/>
            </Trigger>
            <Trigger Property="Tag" Value="b">
                <Setter Property="CornerRadius" TargetName="BD" Value="4,4,0,0"/>
                <Setter Property="Margin" TargetName="BD" Value="2,2,2,0"/>
            </Trigger>
            <Trigger Property="Tag" Value="f">
                <Setter Property="Fill" TargetName="CP" Value="{DynamicResource Foreground.BaseBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--文字按钮模板-->
    <ControlTemplate x:Key="textButtonTemplate" TargetType="{x:Type Button}">
        <Border x:Name="BD" Height="Auto" Width="Auto" Background="Transparent">
            <ContentPresenter x:Name="CP" Margin="2,0,2,0"
                              TextElement.Foreground="{DynamicResource Foreground.ThemeBrush}"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center">
            </ContentPresenter>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource Highlight.ThemeBrush}" TargetName="BD"/>
            </MultiTrigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Highlight.ThemeBrush}" TargetName="BD"/>
                <Setter Property="Opacity" Value="0.8" TargetName="BD"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--通用按钮style-->
    <Style x:Key="generalButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template" Value="{DynamicResource generalButtonTemplate}"/>
    </Style>
    <!--通用CheckBox样式-->
    <ControlTemplate x:Key="generalCheckTemplate" TargetType="{x:Type CheckBox}">
        <Border x:Name="BD" CornerRadius="4" Margin="2" BorderThickness="1"
                Background="Transparent" BorderBrush="Transparent">
            <Path x:Name="CP" Stroke="{TemplateBinding Foreground}"
                  HorizontalAlignment="Center" StrokeThickness="1"
                  VerticalAlignment="Center"
                  Data="{Binding Content, 
                RelativeSource={RelativeSource TemplatedParent}}" >
            </Path>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="Background" Value="{DynamicResource Highlight.BaseBrush}" TargetName="BD"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
            </Trigger>
            <Trigger Property="Tag" Value="l">
                <Setter Property="CornerRadius" TargetName="BD" Value="0,4,4,0"/>
                <Setter Property="Margin" TargetName="BD" Value="0,2,2,2"/>
            </Trigger>
            <Trigger Property="Tag" Value="t">
                <Setter Property="CornerRadius" TargetName="BD" Value="0,0,4,4"/>
                <Setter Property="Margin" TargetName="BD" Value="2,0,2,2"/>
            </Trigger>
            <Trigger Property="Tag" Value="r">
                <Setter Property="CornerRadius" TargetName="BD" Value="4,0,0,4"/>
                <Setter Property="Margin" TargetName="BD" Value="2,2,0,2"/>
            </Trigger>
            <Trigger Property="Tag" Value="b">
                <Setter Property="CornerRadius" TargetName="BD" Value="4,4,0,0"/>
                <Setter Property="Margin" TargetName="BD" Value="2,2,2,0"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--通用checkBox的Style-->
    <Style x:Key="generalCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource MiddleBrush}"/>
        <Setter Property="Template" Value="{DynamicResource generalCheckTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Foreground.BaseBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--TabItem的关闭按钮-->
    <ControlTemplate x:Key="TabItemCloseBtnTemplate" TargetType="{x:Type Button}">
        <Border x:Name="BD" Width="16" Height="16" CornerRadius="8"
                Background="Transparent">
            <Path x:Name="CP" Stroke="{DynamicResource Text.Foreground.BaseBrush}" StrokeThickness="1" Data="M4,4 L12,12 M4,12 L12,4"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource RedBrush}" TargetName="BD"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Uid" Value="1"/>
                    <Condition Property="IsMouseOver" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Stroke" Value="{DynamicResource BaseBrush}" TargetName="CP"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--TabItem模板-->
    <ControlTemplate x:Key="MBTabItemTemplate" TargetType="{x:Type TabItem}">
        <Border x:Name="BD" BorderBrush="{DynamicResource MainBrush}" 
                Background="{DynamicResource MainBrush}" TextElement.Foreground="AliceBlue"
                BorderThickness="1" CornerRadius="4,4,0,0">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="CP" Grid.Column="0" 
                                  ContentSource="Header" Margin="2"
                                  TextElement.Foreground="{Binding ElementName=TB, Path=Foreground}"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Center"/>
                <TextBlock x:Name="TB" Grid.Column="1" Text="{Binding IsModified}" 
                           Foreground="{DynamicResource Foreground.BaseBrush}" />
                <Button Grid.ColumnSpan="2" Name="CloseBtn" 
                        Width="16" Height="16" x:Uid="0" Margin="2"
                        Template="{DynamicResource TabItemCloseBtnTemplate}"
                        HorizontalAlignment="Right" VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Opacity" Value="0.8" TargetName="BD"/>
                <Setter Property="Foreground" Value="{DynamicResource Foreground.ThemeBrush}" TargetName="TB"/>
                <Setter Property="Background" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
            </MultiTrigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource Foreground.ThemeBrush}" TargetName="TB"/>
                <Setter Property="Background" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="BorderThickness" Value="2,2,2,0" TargetName="BD"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
                <Setter Property="Uid" Value="1" TargetName="CloseBtn"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--TabControl Style-->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local" Background="{DynamicResource MainBrush}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel"
                                  Grid.Row="0"
                                  Panel.ZIndex="1"
                                  IsItemsHost="True"
                                  KeyboardNavigation.TabIndex="1"/>
                        <TextBlock Text="请从节点图中打开一个节点" FontSize="24" Grid.Row="1"
                                   Foreground="{DynamicResource Foreground.BaseBrush}"
                                   HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        <Border x:Name="Border"
                                Grid.Row="1"
                                KeyboardNavigation.TabNavigation="Local"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                KeyboardNavigation.TabIndex="2">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--textBox的模板-->
    <ControlTemplate x:Key="textBoxTemplate" TargetType="{x:Type TextBox}">
        <Border x:Name="BD" Background="{TemplateBinding Background}" Padding="1"
                BorderThickness="1" BorderBrush="Transparent">
            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource ThemeBrush}" TargetName="BD"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--textBox的Style-->
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Template" Value="{DynamicResource textBoxTemplate}"/>
        <Setter Property="Foreground" Value="{DynamicResource Text.Foreground.BaseBrush}"/>
        <Setter Property="ToolTip" Value="{Binding Text, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ThemeBrush}"/>
        <Style.Triggers>
            <Trigger Property="Text" Value="">
                <Setter Property="ToolTip" Value="{x:Null}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--控制下面东西升降的按钮的template-->
    <ControlTemplate x:Key="upDownCheckBoxTemplate" TargetType="{x:Type CheckBox}">
        <Border x:Name="cbBd" Background="{DynamicResource ThemeBrush}"
                Width="18" Height="18" CornerRadius="4">
            <Path x:Name="CP" Data="M0,4 4,0 L8,4 M0,8 4,4 L8,8"
                  HorizontalAlignment="Center" VerticalAlignment="Center"
                  Stroke="{DynamicResource Foreground.ThemeBrush}" StrokeThickness="1"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Highlight.ThemeBrush}" TargetName="cbBd"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Data" Value="M0,0 4,4 L8,0 M0,4 4,8 L8,4" TargetName="CP"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--每个标签页末尾的东西-->
    <ControlTemplate x:Key="tabEndTemplate" TargetType="{x:Type UserControl}">
        <Grid Background="{DynamicResource ThemeBrush}">
            <Grid.RowDefinitions>
                <RowDefinition Height="20"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <StackPanel Orientation="Horizontal" 
                        HorizontalAlignment="Left" VerticalAlignment="Center">
                <CheckBox x:Name="showHideBtn" IsChecked="False" Width="20" ToolTip="查看后继节点"
                          Template="{DynamicResource upDownCheckBoxTemplate}"
                          HorizontalAlignment="Center" VerticalAlignment="Center"/>
                <Button x:Name="backBtn" Content="返回节点图" 
                        Template="{StaticResource textButtonTemplate}"/>
                <TextBlock x:Name="questionTxt" Margin="8,0,0,0"
                           Foreground="{DynamicResource Foreground.ThemeBrush}"
                           VerticalAlignment="Center"/>
            </StackPanel>
            <StackPanel Orientation="Horizontal" 
                        HorizontalAlignment="Right" VerticalAlignment="Center">
                <TextBlock Text="词数："
                           Margin="8,0,0,0"
                           Foreground="{DynamicResource Foreground.ThemeBrush}"/>
                <TextBlock Text="{Binding Path=Text, ElementName=copyWordCount}" 
                           Margin="0,0,8,0"
                           Foreground="{DynamicResource Foreground.ThemeBrush}"/>
                <TextBlock Text="字数：" 
                           Margin="8,0,0,0"
                           Foreground="{DynamicResource Foreground.ThemeBrush}"/>
                <TextBlock Text="{Binding Path=Text, ElementName=copyCharCount}" 
                           Margin="0,0,8,0"
                           Foreground="{DynamicResource Foreground.ThemeBrush}"/>
            </StackPanel>
            <ScrollViewer x:Name="sv" Grid.Row="1" Height="0"
                          Background="{DynamicResource BaseBrush}"
                          FocusVisualStyle="{x:Null}"
                          HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                <Grid x:Name="container" Grid.IsSharedSizeScope="True"/>
            </ScrollViewer>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True" SourceName="showHideBtn">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="sv"
                                             Storyboard.TargetProperty="(ScrollViewer.Height)"
                                             Duration="0:0:0.5" 
                                             To="120"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="sv"
                                             Storyboard.TargetProperty="(ScrollViewer.Height)"
                                             Duration="0:0:0.5" 
                                             To="0"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!--文本片段显示控件的operation控制checkbox-->
    <ControlTemplate x:Key="fragmentOperationCheckBoxTemplate" TargetType="{x:Type CheckBox}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Path x:Name="upPath"  Grid.Row="0" ToolTip="隐藏备注"
                  Fill="{DynamicResource ThemeBrush}" Data="M0,10 20,10 10,0Z"/>
            <Path x:Name="downPath"  Grid.Row="1" ToolTip="添加备注"
                  Fill="{DynamicResource ThemeBrush}" Data="M0,0 20,0 10,10Z"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Visibility" Value="Hidden" TargetName="upPath"/>
                <Setter Property="Visibility" Value="Visible" TargetName="downPath"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Visibility" Value="Hidden" TargetName="downPath"/>
                <Setter Property="Visibility" Value="Visible" TargetName="upPath"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="upPath">
                <Setter Property="Opacity" Value="0.7" TargetName="upPath"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="downPath">
                <Setter Property="Opacity" Value="0.7" TargetName="downPath"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--operationTextBox的模板-->
    <ControlTemplate x:Key="operationTextBoxTemplate" TargetType="{x:Type TextBox}">
        <Border x:Name="BD" Background="#60808080" Margin="20,0,120,0"
                BorderThickness="1" BorderBrush="{StaticResource Fragment.Background}">
            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Text" Value=""/>
                    <Condition Property="Height" Value="2"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="Transparent" TargetName="BD"/>
            </MultiTrigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{StaticResource Fragment.BorderBrush}" TargetName="BD"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--片段内容的模板-->
    <ControlTemplate x:Key="contentTextBoxTemplate" TargetType="{x:Type TextBox}">
        <Border x:Name="BD" Background="Transparent"
                BorderThickness="0,2,0,2" BorderBrush="Transparent">
            <ScrollViewer Margin="0" x:Name="PART_ContentHost"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{StaticResource Fragment.Background}" TargetName="BD"/>
                <Setter Property="BorderBrush" Value="{StaticResource Fragment.BorderBrush}" TargetName="BD"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{StaticResource Fragment.BorderBrush}" TargetName="BD"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--文本编辑textBox的Style-->
    <Style x:Key="fragmentPresenterTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="AcceptsReturn" Value="True"/>
        <Setter Property="AcceptsTab" Value="True"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="FontSize" Value="{Binding DataContext.TextFontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
        <Setter Property="Foreground" Value="{DynamicResource Text.Foreground.BaseBrush}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource ThemeBrush}"/>
    </Style>
</ResourceDictionary>